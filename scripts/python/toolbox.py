import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

def binding_prob(x, kd, n):
  """
  

  Parameters
  ----------
  x : TYPE
    Quantity (e.g. concentration) of the protein
  kd : TYPE
    K_off/K_on, disassociation constant
  n : TYPE
    Hill coefficient.

  Returns
  -------
  None.

  """
  return x**n / (kd**n + x**n)

def HillCube(x, kd, n, normalized=False):
  """
  function that is implemented in ODEfy

  Parameters
  ----------
  x : TYPE
    DESCRIPTION.
  kd : TYPE
    DESCRIPTION.
  n : TYPE
    DESCRIPTION.
  normalized : TYPE, optional
    DESCRIPTION. The default is False.

  Returns
  -------
  TYPE
    DESCRIPTION.

  """
  if normalized == True:
    return binding_prob(x, kd, n) / binding_prob(1, kd, n)
  else:
    return binding_prob(x, kd, n)

def tick_time(t_start, t_end, time_step):
  """
  

  Parameters
  ----------
  t_start : TYPE
    The first time point to be solved
  t_end : TYPE
    The last time point to be solved
  time_step : TYPE
    How often the ODE model will be solved

  Returns
  -------
  numpy array
    Time points that to be solved

  """
  t_min = t_start; t_max = t_end; dt = time_step
  return np.arange(t_min, t_max+dt, dt)

def solve_pdd(ode_mod, x0, pars, ts):
  """
  

  Parameters
  ----------
  ode_mod : TYPE
    ODE model for proliferation differentiation decision
  x0 : list
    Initial values
  pars : tuple
    Parameters used by the ODE model
  ts : TYPE
    Time points that to be solved. Generated by tick_time().

  Returns
  -------
  TYPE
    DESCRIPTION.

  """
  ts = ts
  x0 = x0
  return odeint(ode_mod, x0, ts, args=pars)

def sketch_ppd(xt, proliferation, differentiation, ts):
  """
  

  Parameters
  ----------
  xt : numpy array
    Solution produced by solve_pdd()
  proliferation : TYPE
    Proliferation activity calculated by rate_proliferation()
  differentiation : TYPE
    Differentiation activity calculated by rate_differentiation()
  ts : TYPE
    Time points that are generated by tick_time()

  Returns
  -------
  Line plots with one column facet. 

  """
  
  fig, ax = plt.subplots(7,1)

  ax[0].plot(ts, xt[:,0], color='k')
  ax[0].set_xlabel('Hour')
  ax[0].set_ylabel('mls-2')
  ax[0].set_xticks(np.arange(0, 20+2, 2))

  ax[1].plot(ts, xt[:,1], color='k')
  ax[1].set_xlabel('Hour')
  ax[1].set_ylabel('hlh-1')
  ax[1].set_xticks(np.arange(0, 20+2, 2))

  ax[2].plot(ts, xt[:,2], color='k') 
  ax[2].set_xlabel('Hour')
  ax[2].set_ylabel('fos-1')
  ax[2].set_xticks(np.arange(0, 20+2, 2))

  ax[3].plot(ts, xt[:,3], color='g', label='cyd-1')
  ax[3].plot(ts, xt[:,4], color='r', label='cki-1')
  ax[3].plot(ts, xt[:,7], color='blue', label='cye-1')
  ax[3].set_xlabel('Hour')
  ax[3].legend()
  ax[3].set_xticks(np.arange(0, 20+2, 2))
  
  ax[4].plot(ts, xt[:,6], color='k')
  ax[4].set_xlabel('Hour')
  ax[4].set_ylabel('lin-35')
  ax[4].set_xticks(np.arange(0,20+2,2))
  
  ax[5].plot(ts, xt[:,5], color='k')
  ax[5].set_xlabel('Hour')
  ax[5].set_ylabel('E2F')
  ax[5].set_xticks(np.arange(0,20+2,2))
  
  ax[6].plot(ts, proliferation, color='k',linestyle='-', label='proliferation')
  ax[6].plot(ts, differentiation, color='k', linestyle=':', label='differentiation')
  ax[6].set_xlabel('Hour')
  ax[6].set_xticks(np.arange(0,20+2,2))
  ax[6].legend()

  plt.show()
  
def sim_experiment(ode_model, x0, ts, f_mls2_in, rate_proliferation, rate_differentiation, 
                   ko_hlh1=False, ko_lin35=False, ko_cki1=False):
  # parameters
  tau_mls2=0.5
  tau_hlh1=0.5; k_mls2_hlh1=0.3; k_myod_hlh1=0.3; 
  tau_fos1=0.5; k_myod_fos1=0.3
  tau_cyd1=0.5; k_fos1_cyd1=0.3; 
  tau_cki1=0.5; k_myod_cki1=0.3; 
  km_e2f=0.3
  tau_lin35=0.5; k_myod_lin35=0.3; 
  tau_cye1=0.5; k_e2f_cye1=0.3

  my_pars = (tau_mls2, f_mls2_in, 
             tau_hlh1, k_mls2_hlh1, k_myod_hlh1, ko_hlh1,
             tau_fos1, k_myod_fos1, 
             tau_cyd1, k_fos1_cyd1, 
             tau_cki1, k_myod_cki1, ko_cki1,
             km_e2f, 
             tau_lin35, k_myod_lin35, ko_lin35, 
             tau_cye1, k_e2f_cye1)

  # solution
  xt = solve_pdd(ode_model, x0, my_pars, ts)

  proliferation = rate_proliferation(xt[:,5], kd_e2f=0.3)
  differentiation = rate_differentiation(myod=xt[:,1], cyd1=xt[:,3], fos1=xt[:,2], lin35=xt[:,6], kd_myod=0.3, kd_fos1=0.3)

  # visualization
  sketch_ppd(xt, proliferation, differentiation, ts)